/****************************************************************************
** Meta object code from reading C++ file 'Tests.cpp'
**
** Created by: The Qt Meta Object Compiler version 69 (Qt 6.9.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qmetatype.h>

#include <QtCore/qtmochelpers.h>

#include <memory>


#include <QtCore/qxptype_traits.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'Tests.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 69
#error "This file was generated using the moc from 6.9.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {
struct qt_meta_tag_ZN17LibCalamaresTestsE_t {};
} // unnamed namespace

template <> constexpr inline auto LibCalamaresTests::qt_create_metaobjectdata<qt_meta_tag_ZN17LibCalamaresTestsE_t>()
{
    namespace QMC = QtMocConstants;
    QtMocHelpers::StringRefStorage qt_stringData {
        "LibCalamaresTests",
        "initTestCase",
        "",
        "testDebugLevels",
        "testLoadSaveYaml",
        "testLoadSaveYamlExtended",
        "testCommands",
        "testCommandExpansion_data",
        "testCommandExpansion",
        "testCommandConstructors",
        "testCommandConstructorsYAML",
        "testCommandRunning",
        "testCommandTimeout",
        "testCommandVerbose",
        "testUmask",
        "testPermissions",
        "testEntropy",
        "testPrintableEntropy",
        "testOddSizedPrintable",
        "testPointerSetter",
        "testTraits",
        "testVariantStringListCode",
        "testVariantStringListYAMLDashed",
        "testVariantStringListYAMLBracketed",
        "testStringTruncation",
        "testStringTruncationShorter",
        "testStringTruncationDegenerate",
        "testStringRemoveLeading_data",
        "testStringRemoveLeading",
        "testStringRemoveTrailing_data",
        "testStringRemoveTrailing",
        "testStringMacroExpander_data",
        "testStringMacroExpander",
        "testRunnerDirs",
        "testCalculateWorkingDirectory",
        "testRunnerOutput",
        "testReadWriteFile"
    };

    QtMocHelpers::UintData qt_methods {
        // Slot 'initTestCase'
        QtMocHelpers::SlotData<void()>(1, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testDebugLevels'
        QtMocHelpers::SlotData<void()>(3, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testLoadSaveYaml'
        QtMocHelpers::SlotData<void()>(4, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testLoadSaveYamlExtended'
        QtMocHelpers::SlotData<void()>(5, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testCommands'
        QtMocHelpers::SlotData<void()>(6, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testCommandExpansion_data'
        QtMocHelpers::SlotData<void()>(7, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testCommandExpansion'
        QtMocHelpers::SlotData<void()>(8, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testCommandConstructors'
        QtMocHelpers::SlotData<void()>(9, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testCommandConstructorsYAML'
        QtMocHelpers::SlotData<void()>(10, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testCommandRunning'
        QtMocHelpers::SlotData<void()>(11, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testCommandTimeout'
        QtMocHelpers::SlotData<void()>(12, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testCommandVerbose'
        QtMocHelpers::SlotData<void()>(13, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testUmask'
        QtMocHelpers::SlotData<void()>(14, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testPermissions'
        QtMocHelpers::SlotData<void()>(15, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testEntropy'
        QtMocHelpers::SlotData<void()>(16, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testPrintableEntropy'
        QtMocHelpers::SlotData<void()>(17, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testOddSizedPrintable'
        QtMocHelpers::SlotData<void()>(18, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testPointerSetter'
        QtMocHelpers::SlotData<void()>(19, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testTraits'
        QtMocHelpers::SlotData<void()>(20, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testVariantStringListCode'
        QtMocHelpers::SlotData<void()>(21, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testVariantStringListYAMLDashed'
        QtMocHelpers::SlotData<void()>(22, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testVariantStringListYAMLBracketed'
        QtMocHelpers::SlotData<void()>(23, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testStringTruncation'
        QtMocHelpers::SlotData<void()>(24, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testStringTruncationShorter'
        QtMocHelpers::SlotData<void()>(25, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testStringTruncationDegenerate'
        QtMocHelpers::SlotData<void()>(26, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testStringRemoveLeading_data'
        QtMocHelpers::SlotData<void()>(27, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testStringRemoveLeading'
        QtMocHelpers::SlotData<void()>(28, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testStringRemoveTrailing_data'
        QtMocHelpers::SlotData<void()>(29, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testStringRemoveTrailing'
        QtMocHelpers::SlotData<void()>(30, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testStringMacroExpander_data'
        QtMocHelpers::SlotData<void()>(31, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testStringMacroExpander'
        QtMocHelpers::SlotData<void()>(32, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testRunnerDirs'
        QtMocHelpers::SlotData<void()>(33, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testCalculateWorkingDirectory'
        QtMocHelpers::SlotData<void()>(34, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testRunnerOutput'
        QtMocHelpers::SlotData<void()>(35, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testReadWriteFile'
        QtMocHelpers::SlotData<void()>(36, 2, QMC::AccessPrivate, QMetaType::Void),
    };
    QtMocHelpers::UintData qt_properties {
    };
    QtMocHelpers::UintData qt_enums {
    };
    return QtMocHelpers::metaObjectData<LibCalamaresTests, qt_meta_tag_ZN17LibCalamaresTestsE_t>(QMC::MetaObjectFlag{}, qt_stringData,
            qt_methods, qt_properties, qt_enums);
}
Q_CONSTINIT const QMetaObject LibCalamaresTests::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN17LibCalamaresTestsE_t>.stringdata,
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN17LibCalamaresTestsE_t>.data,
    qt_static_metacall,
    nullptr,
    qt_staticMetaObjectRelocatingContent<qt_meta_tag_ZN17LibCalamaresTestsE_t>.metaTypes,
    nullptr
} };

void LibCalamaresTests::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    auto *_t = static_cast<LibCalamaresTests *>(_o);
    if (_c == QMetaObject::InvokeMetaMethod) {
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->testDebugLevels(); break;
        case 2: _t->testLoadSaveYaml(); break;
        case 3: _t->testLoadSaveYamlExtended(); break;
        case 4: _t->testCommands(); break;
        case 5: _t->testCommandExpansion_data(); break;
        case 6: _t->testCommandExpansion(); break;
        case 7: _t->testCommandConstructors(); break;
        case 8: _t->testCommandConstructorsYAML(); break;
        case 9: _t->testCommandRunning(); break;
        case 10: _t->testCommandTimeout(); break;
        case 11: _t->testCommandVerbose(); break;
        case 12: _t->testUmask(); break;
        case 13: _t->testPermissions(); break;
        case 14: _t->testEntropy(); break;
        case 15: _t->testPrintableEntropy(); break;
        case 16: _t->testOddSizedPrintable(); break;
        case 17: _t->testPointerSetter(); break;
        case 18: _t->testTraits(); break;
        case 19: _t->testVariantStringListCode(); break;
        case 20: _t->testVariantStringListYAMLDashed(); break;
        case 21: _t->testVariantStringListYAMLBracketed(); break;
        case 22: _t->testStringTruncation(); break;
        case 23: _t->testStringTruncationShorter(); break;
        case 24: _t->testStringTruncationDegenerate(); break;
        case 25: _t->testStringRemoveLeading_data(); break;
        case 26: _t->testStringRemoveLeading(); break;
        case 27: _t->testStringRemoveTrailing_data(); break;
        case 28: _t->testStringRemoveTrailing(); break;
        case 29: _t->testStringMacroExpander_data(); break;
        case 30: _t->testStringMacroExpander(); break;
        case 31: _t->testRunnerDirs(); break;
        case 32: _t->testCalculateWorkingDirectory(); break;
        case 33: _t->testRunnerOutput(); break;
        case 34: _t->testReadWriteFile(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *LibCalamaresTests::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *LibCalamaresTests::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_staticMetaObjectStaticContent<qt_meta_tag_ZN17LibCalamaresTestsE_t>.strings))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int LibCalamaresTests::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 35)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 35;
    }
    if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 35)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 35;
    }
    return _id;
}
QT_WARNING_POP

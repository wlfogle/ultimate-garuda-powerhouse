# AI-Enhanced MobaLiveCD Linux - Makefile
# Advanced build system with optimization and development targets

SHELL := /bin/bash
.PHONY: help install install-user install-system uninstall check test run clean dev-setup build-appimage

# Project Configuration
PROJECT_NAME := mobalivecd-ai
VERSION := 2.0.0
PYTHON := python3

# Installation Paths
PREFIX := /usr/local
BINDIR := $(PREFIX)/bin
DATADIR := $(PREFIX)/share
APPDIR := $(DATADIR)/applications
ICONDIR := $(DATADIR)/icons/hicolor
LOCALEDIR := $(DATADIR)/locale

# User Installation Paths
USER_PREFIX := $(HOME)/.local
USER_BINDIR := $(USER_PREFIX)/bin
USER_DATADIR := $(USER_PREFIX)/share
USER_APPDIR := $(USER_DATADIR)/applications
USER_ICONDIR := $(USER_DATADIR)/icons/hicolor

# Source Files
PYTHON_SOURCES := $(shell find . -name "*.py" -type f)
UI_SOURCES := $(shell find ui/ -name "*.ui" -type f 2>/dev/null || true)
RESOURCE_SOURCES := $(shell find assets/ -type f 2>/dev/null || true)

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
PURPLE := \033[0;35m
CYAN := \033[0;36m
NC := \033[0m

# Default target
help: ## Show this help message
	@echo -e "$(PURPLE)ðŸš€ AI-Enhanced MobaLiveCD Build System$(NC)"
	@echo -e "$(CYAN)Version: $(VERSION)$(NC)"
	@echo ""
	@echo -e "$(GREEN)Available targets:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

check: ## Check system dependencies and requirements
	@echo -e "$(BLUE)[CHECK]$(NC) Verifying system dependencies..."
	@$(PYTHON) --version || (echo -e "$(RED)Error: Python 3.8+ required$(NC)" && exit 1)
	@echo -e "$(GREEN)âœ“$(NC) Python: $$($(PYTHON) --version)"
	
	@command -v qemu-system-x86_64 >/dev/null || (echo -e "$(RED)Error: QEMU not found$(NC)" && exit 1)
	@echo -e "$(GREEN)âœ“$(NC) QEMU: $$(qemu-system-x86_64 --version | head -1)"
	
	@$(PYTHON) -c "import gi; gi.require_version('Gtk', '4.0'); gi.require_version('Adw', '1')" 2>/dev/null || \
		(echo -e "$(RED)Error: GTK4/Libadwaita not found$(NC)" && exit 1)
	@echo -e "$(GREEN)âœ“$(NC) GTK4/Libadwaita: Available"
	
	@$(PYTHON) -c "import psutil" 2>/dev/null || \
		(echo -e "$(YELLOW)Warning: psutil not found - installing...$(NC)" && pip3 install --user psutil)
	@echo -e "$(GREEN)âœ“$(NC) psutil: Available"
	
	@if [ -r /dev/kvm ] && [ -w /dev/kvm ]; then \
		echo -e "$(GREEN)âœ“$(NC) KVM: Available and accessible"; \
	else \
		echo -e "$(YELLOW)âš $(NC) KVM: Not accessible (performance may be reduced)"; \
	fi
	
	@echo -e "$(GREEN)âœ… All dependencies satisfied!$(NC)"

dev-setup: ## Setup development environment
	@echo -e "$(BLUE)[DEV]$(NC) Setting up development environment..."
	@pip3 install --user --upgrade pip
	@pip3 install --user psutil typing-extensions dataclasses
	
	@echo -e "$(BLUE)[DEV]$(NC) Installing development tools..."
	@pip3 install --user black isort flake8 mypy
	
	@echo -e "$(GREEN)âœ… Development environment ready!$(NC)"
	@echo -e "$(CYAN)Run 'make run' to test the application$(NC)"

test: check ## Run tests and code quality checks
	@echo -e "$(BLUE)[TEST]$(NC) Running code quality checks..."
	
	@echo -e "$(YELLOW)â†’$(NC) Checking Python syntax..."
	@$(PYTHON) -m py_compile $(PYTHON_SOURCES)
	@echo -e "$(GREEN)âœ“$(NC) Python syntax OK"
	
	@echo -e "$(YELLOW)â†’$(NC) Running basic import tests..."
	@$(PYTHON) -c "from core.enhanced_qemu_runner import AIEnhancedQEMURunner; print('âœ“ Core imports OK')"
	
	@if command -v flake8 >/dev/null; then \
		echo -e "$(YELLOW)â†’$(NC) Running flake8 linting..."; \
		flake8 --max-line-length=120 --ignore=E203,W503 $(PYTHON_SOURCES) || true; \
	fi
	
	@echo -e "$(GREEN)âœ… Tests completed!$(NC)"

run: check ## Run the application directly (development mode)
	@echo -e "$(BLUE)[RUN]$(NC) Starting MobaLiveCD AI (development mode)..."
	@PYTHONPATH=. $(PYTHON) enhanced_mobalivecd.py

run-debug: check ## Run with debug output enabled
	@echo -e "$(BLUE)[DEBUG]$(NC) Starting with debug output..."
	@PYTHONPATH=. $(PYTHON) enhanced_mobalivecd.py --debug

run-with-iso: check ## Run with a sample ISO (prompts for path)
	@echo -e "$(CYAN)Enter ISO file path:$(NC)"
	@read iso_path; PYTHONPATH=. $(PYTHON) enhanced_mobalivecd.py "$$iso_path"

install-deps-fedora: ## Install dependencies on Fedora/RHEL
	@echo -e "$(BLUE)[INSTALL]$(NC) Installing Fedora/RHEL dependencies..."
	sudo dnf install -y python3 python3-pip python3-gobject gtk4-devel \
		libadwaita-devel qemu-system-x86 python3-psutil

install-deps-ubuntu: ## Install dependencies on Ubuntu/Debian
	@echo -e "$(BLUE)[INSTALL]$(NC) Installing Ubuntu/Debian dependencies..."
	sudo apt update
	sudo apt install -y python3 python3-pip python3-gi python3-gi-cairo \
		gir1.2-gtk-4.0 gir1.2-adw-1 qemu-system-x86 python3-psutil

install-deps-arch: ## Install dependencies on Arch Linux
	@echo -e "$(BLUE)[INSTALL]$(NC) Installing Arch Linux dependencies..."
	sudo pacman -S --needed python python-pip python-gobject gtk4 \
		libadwaita qemu-system-x86 python-psutil

build-resources: ## Build application resources (icons, UI files)
	@echo -e "$(BLUE)[BUILD]$(NC) Building application resources..."
	@mkdir -p build/
	
	@if [ -d "assets/" ]; then \
		echo -e "$(YELLOW)â†’$(NC) Processing assets..."; \
		cp -r assets/ build/; \
	fi
	
	@if [ -d "ui/" ] && [ -n "$(UI_SOURCES)" ]; then \
		echo -e "$(YELLOW)â†’$(NC) Processing UI files..."; \
		cp -r ui/ build/; \
	fi
	
	@echo -e "$(GREEN)âœ“$(NC) Resources built"

install-user: check build-resources ## Install for current user only
	@echo -e "$(BLUE)[INSTALL-USER]$(NC) Installing for user: $(USER)..."
	@mkdir -p $(USER_BINDIR) $(USER_APPDIR) $(USER_DATADIR)/$(PROJECT_NAME)
	
	@echo -e "$(YELLOW)â†’$(NC) Installing application files..."
	@cp -r core/ ui/ $(USER_DATADIR)/$(PROJECT_NAME)/
	@cp enhanced_mobalivecd.py $(USER_DATADIR)/$(PROJECT_NAME)/
	
	@if [ -d "build/" ]; then \
		cp -r build/* $(USER_DATADIR)/$(PROJECT_NAME)/ 2>/dev/null || true; \
	fi
	
	@echo -e "$(YELLOW)â†’$(NC) Creating launcher script..."
	@cat > $(USER_BINDIR)/$(PROJECT_NAME) << 'EOF'
#!/bin/bash
cd $(USER_DATADIR)/$(PROJECT_NAME)
PYTHONPATH=. python3 enhanced_mobalivecd.py "$$@"
EOF
	@chmod +x $(USER_BINDIR)/$(PROJECT_NAME)
	
	@echo -e "$(YELLOW)â†’$(NC) Installing desktop entry..."
	@cat > $(USER_APPDIR)/$(PROJECT_NAME).desktop << 'EOF'
[Desktop Entry]
Version=1.0
Type=Application
Name=MobaLiveCD AI
GenericName=ISO Virtualization Tool
Comment=AI-Enhanced QEMU-based LiveCD/ISO testing tool
Icon=computer
Exec=$(USER_BINDIR)/$(PROJECT_NAME) %f
Terminal=false
StartupNotify=true
Categories=System;Utility;Emulator;
MimeType=application/x-iso9660-image;application/x-cd-image;
Keywords=qemu;kvm;virtualization;iso;livecd;
EOF
	
	@update-desktop-database $(USER_APPDIR) 2>/dev/null || true
	@echo -e "$(GREEN)âœ… User installation completed!$(NC)"
	@echo -e "$(CYAN)Run '$(PROJECT_NAME)' from terminal or find it in your applications menu$(NC)"

install-system: check build-resources ## Install system-wide (requires root)
	@echo -e "$(BLUE)[INSTALL-SYSTEM]$(NC) Installing system-wide..."
	@if [ "$$EUID" -ne 0 ]; then \
		echo -e "$(RED)Error: System installation requires root privileges$(NC)"; \
		echo -e "$(CYAN)Use: sudo make install-system$(NC)"; \
		exit 1; \
	fi
	
	@mkdir -p $(BINDIR) $(APPDIR) $(DATADIR)/$(PROJECT_NAME)
	
	@echo -e "$(YELLOW)â†’$(NC) Installing application files..."
	@cp -r core/ ui/ $(DATADIR)/$(PROJECT_NAME)/
	@cp enhanced_mobalivecd.py $(DATADIR)/$(PROJECT_NAME)/
	
	@if [ -d "build/" ]; then \
		cp -r build/* $(DATADIR)/$(PROJECT_NAME)/ 2>/dev/null || true; \
	fi
	
	@echo -e "$(YELLOW)â†’$(NC) Creating system launcher..."
	@cat > $(BINDIR)/$(PROJECT_NAME) << 'EOF'
#!/bin/bash
cd $(DATADIR)/$(PROJECT_NAME)
PYTHONPATH=. python3 enhanced_mobalivecd.py "$$@"
EOF
	@chmod +x $(BINDIR)/$(PROJECT_NAME)
	
	@echo -e "$(YELLOW)â†’$(NC) Installing desktop entry..."
	@cat > $(APPDIR)/$(PROJECT_NAME).desktop << 'EOF'
[Desktop Entry]
Version=1.0
Type=Application
Name=MobaLiveCD AI
GenericName=ISO Virtualization Tool
Comment=AI-Enhanced QEMU-based LiveCD/ISO testing tool
Icon=computer
Exec=$(BINDIR)/$(PROJECT_NAME) %f
Terminal=false
StartupNotify=true
Categories=System;Utility;Emulator;
MimeType=application/x-iso9660-image;application/x-cd-image;
Keywords=qemu;kvm;virtualization;iso;livecd;
EOF
	
	@update-desktop-database $(APPDIR) 2>/dev/null || true
	@echo -e "$(GREEN)âœ… System installation completed!$(NC)"

uninstall-user: ## Uninstall user installation
	@echo -e "$(YELLOW)[UNINSTALL-USER]$(NC) Removing user installation..."
	@rm -f $(USER_BINDIR)/$(PROJECT_NAME)
	@rm -f $(USER_APPDIR)/$(PROJECT_NAME).desktop
	@rm -rf $(USER_DATADIR)/$(PROJECT_NAME)
	@update-desktop-database $(USER_APPDIR) 2>/dev/null || true
	@echo -e "$(GREEN)âœ… User installation removed$(NC)"

uninstall-system: ## Uninstall system installation (requires root)
	@echo -e "$(YELLOW)[UNINSTALL-SYSTEM]$(NC) Removing system installation..."
	@if [ "$$EUID" -ne 0 ]; then \
		echo -e "$(RED)Error: System uninstallation requires root privileges$(NC)"; \
		echo -e "$(CYAN)Use: sudo make uninstall-system$(NC)"; \
		exit 1; \
	fi
	
	@rm -f $(BINDIR)/$(PROJECT_NAME)
	@rm -f $(APPDIR)/$(PROJECT_NAME).desktop
	@rm -rf $(DATADIR)/$(PROJECT_NAME)
	@update-desktop-database $(APPDIR) 2>/dev/null || true
	@echo -e "$(GREEN)âœ… System installation removed$(NC)"

clean: ## Clean build artifacts
	@echo -e "$(YELLOW)[CLEAN]$(NC) Cleaning build artifacts..."
	@rm -rf build/ __pycache__/ */__pycache__/ */*/__pycache__/
	@rm -f *.pyc */*.pyc */*/*.pyc
	@find . -name "*.egg-info" -type d -exec rm -rf {} + 2>/dev/null || true
	@echo -e "$(GREEN)âœ… Clean completed$(NC)"

build-appimage: check build-resources ## Build portable AppImage (experimental)
	@echo -e "$(BLUE)[APPIMAGE]$(NC) Building portable AppImage..."
	@echo -e "$(YELLOW)This is experimental and requires appimagetool$(NC)"
	@mkdir -p AppDir/usr/bin AppDir/usr/share/applications AppDir/usr/share/$(PROJECT_NAME)
	
	@cp -r core/ ui/ enhanced_mobalivecd.py AppDir/usr/share/$(PROJECT_NAME)/
	@if [ -d "build/" ]; then cp -r build/* AppDir/usr/share/$(PROJECT_NAME)/; fi
	
	@cat > AppDir/usr/bin/$(PROJECT_NAME) << 'EOF'
#!/bin/bash
cd $$(dirname "$$0")/../share/$(PROJECT_NAME)
PYTHONPATH=. python3 enhanced_mobalivecd.py "$$@"
EOF
	@chmod +x AppDir/usr/bin/$(PROJECT_NAME)
	
	@cat > AppDir/usr/share/applications/$(PROJECT_NAME).desktop << 'EOF'
[Desktop Entry]
Version=1.0
Type=Application
Name=MobaLiveCD AI
GenericName=ISO Virtualization Tool
Comment=AI-Enhanced QEMU-based LiveCD/ISO testing tool
Icon=computer
Exec=$(PROJECT_NAME) %f
Terminal=false
Categories=System;Utility;
EOF
	
	@if command -v appimagetool >/dev/null; then \
		appimagetool AppDir $(PROJECT_NAME)-$(VERSION)-x86_64.AppImage; \
		echo -e "$(GREEN)âœ… AppImage built: $(PROJECT_NAME)-$(VERSION)-x86_64.AppImage$(NC)"; \
	else \
		echo -e "$(RED)Error: appimagetool not found$(NC)"; \
		echo -e "$(CYAN)Install from: https://github.com/AppImage/AppImageKit$(NC)"; \
	fi

info: ## Show project information
	@echo -e "$(PURPLE)ðŸš€ MobaLiveCD AI - Enhanced ISO Virtualization$(NC)"
	@echo -e "$(CYAN)Version:$(NC) $(VERSION)"
	@echo -e "$(CYAN)Python:$(NC) $$($(PYTHON) --version)"
	@echo -e "$(CYAN)Platform:$(NC) $$(uname -s) $$(uname -m)"
	@echo ""
	@echo -e "$(GREEN)âœ¨ AI Features:$(NC)"
	@echo "  â€¢ ðŸ¤– Intelligent ISO detection and optimization"
	@echo "  â€¢ âš¡ Smart hardware acceleration"
	@echo "  â€¢ ðŸ“Š Real-time performance monitoring"
	@echo "  â€¢ ðŸŽ¨ Modern GTK4/Libadwaita interface"
	@echo "  â€¢ ðŸ”§ Advanced QEMU configuration"
	@echo "  â€¢ ðŸ’» Multi-VM management"
	@echo ""
	@echo -e "$(CYAN)Repository:$(NC) https://github.com/wlfogle/mobalivecd-linux"

# Default installation targets
install: install-user ## Default: install for current user
uninstall: uninstall-user ## Default: uninstall user installation

# Development shortcuts  
dev: dev-setup run ## Setup development environment and run
quick-test: check test run ## Quick development cycle

# Include original targets for compatibility
include Makefile 2>/dev/null || true
